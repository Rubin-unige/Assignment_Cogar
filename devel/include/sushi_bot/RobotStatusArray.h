// Generated by gencpp from file sushi_bot/RobotStatusArray.msg
// DO NOT EDIT!


#ifndef SUSHI_BOT_MESSAGE_ROBOTSTATUSARRAY_H
#define SUSHI_BOT_MESSAGE_ROBOTSTATUSARRAY_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <sushi_bot/RobotStatus.h>

namespace sushi_bot
{
template <class ContainerAllocator>
struct RobotStatusArray_
{
  typedef RobotStatusArray_<ContainerAllocator> Type;

  RobotStatusArray_()
    : robots()  {
    }
  RobotStatusArray_(const ContainerAllocator& _alloc)
    : robots(_alloc)  {
  (void)_alloc;
    }



   typedef std::vector< ::sushi_bot::RobotStatus_<ContainerAllocator> , typename std::allocator_traits<ContainerAllocator>::template rebind_alloc< ::sushi_bot::RobotStatus_<ContainerAllocator> >> _robots_type;
  _robots_type robots;





  typedef boost::shared_ptr< ::sushi_bot::RobotStatusArray_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::sushi_bot::RobotStatusArray_<ContainerAllocator> const> ConstPtr;

}; // struct RobotStatusArray_

typedef ::sushi_bot::RobotStatusArray_<std::allocator<void> > RobotStatusArray;

typedef boost::shared_ptr< ::sushi_bot::RobotStatusArray > RobotStatusArrayPtr;
typedef boost::shared_ptr< ::sushi_bot::RobotStatusArray const> RobotStatusArrayConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::sushi_bot::RobotStatusArray_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::sushi_bot::RobotStatusArray_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::sushi_bot::RobotStatusArray_<ContainerAllocator1> & lhs, const ::sushi_bot::RobotStatusArray_<ContainerAllocator2> & rhs)
{
  return lhs.robots == rhs.robots;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::sushi_bot::RobotStatusArray_<ContainerAllocator1> & lhs, const ::sushi_bot::RobotStatusArray_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace sushi_bot

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::sushi_bot::RobotStatusArray_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::sushi_bot::RobotStatusArray_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::sushi_bot::RobotStatusArray_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::sushi_bot::RobotStatusArray_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::sushi_bot::RobotStatusArray_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::sushi_bot::RobotStatusArray_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::sushi_bot::RobotStatusArray_<ContainerAllocator> >
{
  static const char* value()
  {
    return "51965e5e3df189789150d9c35cd148f2";
  }

  static const char* value(const ::sushi_bot::RobotStatusArray_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x51965e5e3df18978ULL;
  static const uint64_t static_value2 = 0x9150d9c35cd148f2ULL;
};

template<class ContainerAllocator>
struct DataType< ::sushi_bot::RobotStatusArray_<ContainerAllocator> >
{
  static const char* value()
  {
    return "sushi_bot/RobotStatusArray";
  }

  static const char* value(const ::sushi_bot::RobotStatusArray_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::sushi_bot::RobotStatusArray_<ContainerAllocator> >
{
  static const char* value()
  {
    return "RobotStatus[] robots\n"
"================================================================================\n"
"MSG: sushi_bot/RobotStatus\n"
"string robot_id\n"
"string status\n"
"string current_task\n"
"string current_table\n"
"bool is_available\n"
;
  }

  static const char* value(const ::sushi_bot::RobotStatusArray_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::sushi_bot::RobotStatusArray_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.robots);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct RobotStatusArray_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::sushi_bot::RobotStatusArray_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::sushi_bot::RobotStatusArray_<ContainerAllocator>& v)
  {
    s << indent << "robots[]" << std::endl;
    for (size_t i = 0; i < v.robots.size(); ++i)
    {
      s << indent << "  robots[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::sushi_bot::RobotStatus_<ContainerAllocator> >::stream(s, indent + "    ", v.robots[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // SUSHI_BOT_MESSAGE_ROBOTSTATUSARRAY_H
