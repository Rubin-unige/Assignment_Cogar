// Generated by gencpp from file sushi_bot/Order.msg
// DO NOT EDIT!


#ifndef SUSHI_BOT_MESSAGE_ORDER_H
#define SUSHI_BOT_MESSAGE_ORDER_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace sushi_bot
{
template <class ContainerAllocator>
struct Order_
{
  typedef Order_<ContainerAllocator> Type;

  Order_()
    : order_id()
    , table_id()
    , dish_name()  {
    }
  Order_(const ContainerAllocator& _alloc)
    : order_id(_alloc)
    , table_id(_alloc)
    , dish_name(_alloc)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _order_id_type;
  _order_id_type order_id;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _table_id_type;
  _table_id_type table_id;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _dish_name_type;
  _dish_name_type dish_name;





  typedef boost::shared_ptr< ::sushi_bot::Order_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::sushi_bot::Order_<ContainerAllocator> const> ConstPtr;

}; // struct Order_

typedef ::sushi_bot::Order_<std::allocator<void> > Order;

typedef boost::shared_ptr< ::sushi_bot::Order > OrderPtr;
typedef boost::shared_ptr< ::sushi_bot::Order const> OrderConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::sushi_bot::Order_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::sushi_bot::Order_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::sushi_bot::Order_<ContainerAllocator1> & lhs, const ::sushi_bot::Order_<ContainerAllocator2> & rhs)
{
  return lhs.order_id == rhs.order_id &&
    lhs.table_id == rhs.table_id &&
    lhs.dish_name == rhs.dish_name;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::sushi_bot::Order_<ContainerAllocator1> & lhs, const ::sushi_bot::Order_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace sushi_bot

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::sushi_bot::Order_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::sushi_bot::Order_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::sushi_bot::Order_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::sushi_bot::Order_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::sushi_bot::Order_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::sushi_bot::Order_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::sushi_bot::Order_<ContainerAllocator> >
{
  static const char* value()
  {
    return "cbb635957c0ba7c2418791d5a6ac2702";
  }

  static const char* value(const ::sushi_bot::Order_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xcbb635957c0ba7c2ULL;
  static const uint64_t static_value2 = 0x418791d5a6ac2702ULL;
};

template<class ContainerAllocator>
struct DataType< ::sushi_bot::Order_<ContainerAllocator> >
{
  static const char* value()
  {
    return "sushi_bot/Order";
  }

  static const char* value(const ::sushi_bot::Order_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::sushi_bot::Order_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string order_id\n"
"string table_id\n"
"string dish_name\n"
;
  }

  static const char* value(const ::sushi_bot::Order_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::sushi_bot::Order_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.order_id);
      stream.next(m.table_id);
      stream.next(m.dish_name);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Order_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::sushi_bot::Order_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::sushi_bot::Order_<ContainerAllocator>& v)
  {
    s << indent << "order_id: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.order_id);
    s << indent << "table_id: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.table_id);
    s << indent << "dish_name: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.dish_name);
  }
};

} // namespace message_operations
} // namespace ros

#endif // SUSHI_BOT_MESSAGE_ORDER_H
