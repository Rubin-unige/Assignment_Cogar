// Generated by gencpp from file sushi_bot/RobotStatus.msg
// DO NOT EDIT!


#ifndef SUSHI_BOT_MESSAGE_ROBOTSTATUS_H
#define SUSHI_BOT_MESSAGE_ROBOTSTATUS_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace sushi_bot
{
template <class ContainerAllocator>
struct RobotStatus_
{
  typedef RobotStatus_<ContainerAllocator> Type;

  RobotStatus_()
    : robot_id()
    , location()
    , status()
    , order_status()
    , order_id()
    , is_available(false)  {
    }
  RobotStatus_(const ContainerAllocator& _alloc)
    : robot_id(_alloc)
    , location(_alloc)
    , status(_alloc)
    , order_status(_alloc)
    , order_id(_alloc)
    , is_available(false)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _robot_id_type;
  _robot_id_type robot_id;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _location_type;
  _location_type location;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _status_type;
  _status_type status;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _order_status_type;
  _order_status_type order_status;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _order_id_type;
  _order_id_type order_id;

   typedef uint8_t _is_available_type;
  _is_available_type is_available;





  typedef boost::shared_ptr< ::sushi_bot::RobotStatus_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::sushi_bot::RobotStatus_<ContainerAllocator> const> ConstPtr;

}; // struct RobotStatus_

typedef ::sushi_bot::RobotStatus_<std::allocator<void> > RobotStatus;

typedef boost::shared_ptr< ::sushi_bot::RobotStatus > RobotStatusPtr;
typedef boost::shared_ptr< ::sushi_bot::RobotStatus const> RobotStatusConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::sushi_bot::RobotStatus_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::sushi_bot::RobotStatus_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::sushi_bot::RobotStatus_<ContainerAllocator1> & lhs, const ::sushi_bot::RobotStatus_<ContainerAllocator2> & rhs)
{
  return lhs.robot_id == rhs.robot_id &&
    lhs.location == rhs.location &&
    lhs.status == rhs.status &&
    lhs.order_status == rhs.order_status &&
    lhs.order_id == rhs.order_id &&
    lhs.is_available == rhs.is_available;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::sushi_bot::RobotStatus_<ContainerAllocator1> & lhs, const ::sushi_bot::RobotStatus_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace sushi_bot

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::sushi_bot::RobotStatus_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::sushi_bot::RobotStatus_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::sushi_bot::RobotStatus_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::sushi_bot::RobotStatus_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::sushi_bot::RobotStatus_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::sushi_bot::RobotStatus_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::sushi_bot::RobotStatus_<ContainerAllocator> >
{
  static const char* value()
  {
    return "e29185a01811c1afe86cbc3bbc80a5fd";
  }

  static const char* value(const ::sushi_bot::RobotStatus_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xe29185a01811c1afULL;
  static const uint64_t static_value2 = 0xe86cbc3bbc80a5fdULL;
};

template<class ContainerAllocator>
struct DataType< ::sushi_bot::RobotStatus_<ContainerAllocator> >
{
  static const char* value()
  {
    return "sushi_bot/RobotStatus";
  }

  static const char* value(const ::sushi_bot::RobotStatus_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::sushi_bot::RobotStatus_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string robot_id\n"
"string location\n"
"string status\n"
"string order_status\n"
"string order_id\n"
"bool is_available\n"
;
  }

  static const char* value(const ::sushi_bot::RobotStatus_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::sushi_bot::RobotStatus_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.robot_id);
      stream.next(m.location);
      stream.next(m.status);
      stream.next(m.order_status);
      stream.next(m.order_id);
      stream.next(m.is_available);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct RobotStatus_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::sushi_bot::RobotStatus_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::sushi_bot::RobotStatus_<ContainerAllocator>& v)
  {
    s << indent << "robot_id: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.robot_id);
    s << indent << "location: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.location);
    s << indent << "status: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.status);
    s << indent << "order_status: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.order_status);
    s << indent << "order_id: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.order_id);
    s << indent << "is_available: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.is_available);
  }
};

} // namespace message_operations
} // namespace ros

#endif // SUSHI_BOT_MESSAGE_ROBOTSTATUS_H
