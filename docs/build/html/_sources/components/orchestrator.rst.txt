.. _orchestrator_subsystem:

Orchestrator Subsystem
======================

Purpose
-------
Dynamically assigns tasks to robots based on availability, proximity, and order verification status.

Components
----------

OrderQueue
^^^^^^^^^^
.. autoclass:: components.orchestrator.OrderQueue
   :members:
   :undoc-members:

RobotMonitor
^^^^^^^^^^^^
.. autoclass:: components.orchestrator.RobotMonitor
   :members:
   :undoc-members:

TaskAssigner
^^^^^^^^^^^^
.. autoclass:: components.orchestrator.TaskAssigner
   :members:
   :undoc-members:

Interfaces
----------

.. list-table:: Orchestrator Interfaces
   :header-rows: 1
   :widths: 20 10 15 25 30

   * - Interface
     - Type
     - Direction
     - Topic/Service
     - Purpose
   * - ``IOrderInput``
     - Required
     - ← In
     - ``/incoming_orders``
     - Receives new orders from restaurant system
   * - ``IRobotStatus``
     - Required
     - ← In
     - ``/robot_status``
     - Tracks robot positions/availability
   * - ``ITaskAssignment``
     - Provided
     - → Out
     - ``/assign_task``
     - Sends tasks to robots


Error Handling
--------------
- **Disputed orders**: Blocks table and notifies staff
- **Robot failures**: Triggers reassignment

